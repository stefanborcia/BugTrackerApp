@using Newtonsoft.Json
@model DashboardViewModel


@{
    ViewData["Title"] = "My Dasboard";
}
<h3>My Dashboard</h3>

<div style="display: flex; justify-content: space-around;   align-items: center;
  min-height: 45vh;width: 100%;margin: 0 auto;">
    <div style="width: 45%;">
        <canvas id="bugDoughnutChart"></canvas>
    </div>
    <div style="width: 45%;">
        <canvas id="monthlyBarChart"></canvas>
    </div>
</div>
@* Section to display the SolvedBug data *@
<div class="pt-5">
    <h3>Recently Solved Bugs</h3> 
    <br />
    <table class="table">
        <thead>
        <tr>
            <th>Steps to Reproduce</th>
            <th>Time Spent (hours)</th>
            <th>Mark as Solved</th>
            <th>Date Resolved</th>
        </tr>
        </thead>
        <tbody>
        @foreach(var solvedBug in Model.RecentlySolvedBugs)
        {
            <tr>
                <td>@solvedBug.StepsToSolve</td>
                <td>@solvedBug.TimeSpent</td>
                <td>@solvedBug.IsResolved</td>
                <td>@solvedBug.DateResolved.ToString("d")</td> 
                <td>
                    <a asp-action="BugDetails" asp-controller="Bug" asp-route-id="@solvedBug.BugId" class="btn btn-primary">Details</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.js"></script>

<script>
    var bugDoughnutCtx = document.getElementById('bugDoughnutChart').getContext('2d');
    var monthlyBarCtx = document.getElementById('monthlyBarChart').getContext('2d');

    // Create doughnut chart for overall bug statistics
    var bugDoughnutChart = new Chart(bugDoughnutCtx, {
        type: 'doughnut',
        data: {
            labels: ['Solved', 'Unsolved', 'High', 'Medium', 'Low'],
            datasets: [{
                label: 'Bug Statistics',
                // Access these counts within BugStatisticsViewModel
                data: [@Model.BugStatistics.SolvedBugsCount, @Model.BugStatistics.UnsolvedBugsCount, @Model.BugStatistics.HighBugsCount, @Model.BugStatistics.MediumBugsCount, @Model.BugStatistics.LowBugsCount],
                backgroundColor: ['#008000', '#ff0000', '#ffa500', '#00ffff', '#800080']
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Overall Bug Statistics'
            }
        }
    });

    // Create bar chart for monthly bug statistics
    var monthlyBarChart = new Chart(monthlyBarCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.BugStatistics.MonthLabels)),
            datasets: [{
                label: 'High',
                data: @Html.Raw(Json.Serialize(Model.BugStatistics.HighBugsMonthlyCount)),
                backgroundColor: '#ffa500',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }, {
                label: 'Medium',
                data: @Html.Raw(Json.Serialize(Model.BugStatistics.MediumBugsMonthlyCount)),
                backgroundColor: '#00ffff',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }, {
                label: 'Low',
                data: @Html.Raw(Json.Serialize(Model.BugStatistics.LowBugsMonthlyCount)),
                backgroundColor: '#800080',
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 1
            }]
        },

        options: {
            title: {
                display: true,
                text: 'Monthly Bug Statistics'
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>

